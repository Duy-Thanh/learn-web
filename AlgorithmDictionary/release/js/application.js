var serverName="dictionary-backend.cyberblog.click",portServer="8080";const fullServer=`https://${serverName}`;async function getRequest(e,r={}){try{let t=`${fullServer}${e}`;if(Object.keys(r).length>0){const e=new URL(t);Object.keys(r).forEach((t=>e.searchParams.append(t,r[t]))),t=e.toString()}const o=await fetch(t);if(!o||!o.ok)throw new Error("Network response was not ok");return await o.json()}catch(e){console.error(`Error: ${e}`)}}const API_index=async()=>{try{const e=await getRequest("/api");if(null==e)throw new Error("Backend cannot be reached: null of response");{console.log("API endpoint reached.");const{message:r,value:t,statusCode:o}=e;if("status"==r&&"working"==t&&"200"==o)return console.log("API endpoint reached successfully"),!0;throw new Error("API endpoint reached with error: ",e)}}catch(e){return console.error(`Error: ${e}`),!1}},API_status_non_details=async()=>{try{const e=await getRequest("/api/status");if(null!=e){console.log("Backend server reached and server resources is measuread.");const{message:r,value:t,statusCode:o}=e;return"server_pressure_status"==r&&"200"==o?null!=t?(console.log(`Server pressure status: ${t}`),t):(console.error("Something went wrong when measuring backend server"),""):(console.error("Something went wrong. Response: ",e),"")}console.warn("Backend server have an occurred error and cannot be measured")}catch(e){return console.error(`Error: ${e}`),""}},API_status_with_details=async()=>{const e={details:"true"};try{const r=await getRequest("/api/status",e);if(null!=r){console.log("Backend server reached and server resources in details mode is measuread.");const{message:e,value:t,statusCode:o}=r;return"server_pressure_status_details"==e&&"200"==o?null!=t?(console.log(`Server pressure details: ${t}`),t):(console.error("Something went wrong when measuring backend server"),""):(console.error("Something went wrong. Response: ",r),"")}console.warn("Backend server have an occurred error and cannot be measured")}catch(e){return console.error(`Error: ${e}`),""}},API_status=async e=>{e?API_status_with_details():API_status_non_details()};function getCookie(e){const r=document.cookie.split(";");for(let t=0;t<r.length;t++){const o=r[t].split("=");if(o[0].trim()===e)return decodeURIComponent(o[1])}return null}const API_get_login_status=async()=>null==getCookie("access_token"),API_register=async(e,r,t,o)=>{const s={username:e,password:r,fullname:t,email:o};try{const e=await getRequest("/api/register",s);if(e.error||e.errorDetails)return alert(`${e.errorDetails}`),void(window.location.href="/register");{const{status:r,statusCode:t}=e;if("succeeded"==r&&200==t)return alert("Create new account successfully. You can use new credentials to login"),void(window.location.href="/login")}}catch(e){console.error(`Error: ${e}`)}},API_getCurrentUser=async()=>{try{var e=await getRequest("/api/get_current_user");try{const{email:r,permission:t,id:o,status:s,username:n,fullname:a}=e;return"false"==s?{email:r,permission:t,id:o,status:s,username:n,fullname:a}:null}catch{const{errorCode:r,errorDetails:t}=e;return alert(`${t}.\n\nError code: ${r}`),null}}catch(e){return console.error(`Error: ${e}`),null}},API_login=async(e,r)=>{var t={username:e,password:r};if(null==e||null==r)alert("Username and Password must not be null. Please fill all the fields and try again"),window.document.location="";else try{var o=await getRequest("/api/login",t);if(o.error||o.errorDetails)alert(`Login failed. Reason: ${o.errorDetails||"Unknown error"}`),window.location.href="/login";else{var{statusCode:s,accessToken:n}=o;console.log(s),API_getCurrentUser().then((e=>e?(console.log(`User details: ${JSON.stringify(e)}`),JSON.stringify(e)):(console.log(`${JSON.stringify(e)}`),JSON.stringify(e)))).catch((e=>{alert(`Error when login. You will be logged out. Error:\n\n${e}`),window.location.href="/login"}))}}catch(e){console.error(`${e}`)}},API_DisplayAlgorithms=async()=>{try{var e=await getRequest("/api/get_algorithms");try{return console.log(e),e}catch{const{errorCode:r,errorDetails:t}=e;alert(`${r} - ${t}`)}}catch(e){alert(`${e}`)}},API_DisplayAlgorithmsBySearchQuery=async e=>{const r={query:e};try{var t=await getRequest("/api/get_algorithms_by_search_term",r);try{return console.log(t),t}catch{const{errorCode:e,errorDetails:r}=t;alert(`${e} - ${r}`)}}catch(e){alert(`${e}`)}},API_logout=async()=>{try{var e=await getRequest("/api/logout");const{status:r,errorCode:t}=e;"succeeded"==r&&200==t&&(alert("Logout completed. You need to login to use the application"),window.location.href="/")}catch(e){console.error(`${e}`)}};